@import '../../../angular-core/styles/common';

$selectArrowWidthHeight: 24;
$selectArrowRight: 12;
$selectTriggerPaddingRight: 44;

@if $sbbBusiness {
  $selectTriggerPaddingRight: 38;
  $selectArrowRight: 6;
}

.sbb-select-panel {
  @include autocompleteBase();
  @include autocompleteDirectionalRules();

  &.sbb-select-panel-above {
    @include autocompleteDirectionalRules($mode: reverse);
  }
}

sbb-select.sbb-select {
  outline: 0;
  display: block;
  @include inputfields;
  padding: 0;
  cursor: pointer;

  &.sbb-select-focused {
    border-color: $sbbColorGrey;

    &[aria-expanded='true'] {
      &:not(.sbb-select-input-above) {
        @include autocompleteInputActive();
      }

      &.sbb-select-input-above {
        @include autocompleteInputActive($mode: reverse);
      }
    }
  }

  &.sbb-select-disabled {
    cursor: default;
    background-color: $sbbColorMilk;
    border-color: $sbbColorAluminum;
  }

  .sbb-select-trigger {
    @include inputFieldPadding();
    position: relative;
    cursor: pointer;
    display: flex;
    align-items: center;
    padding-right: toPx($selectTriggerPaddingRight);

    @include publicOnly() {
      @include mq($from: desktop4k) {
        padding-right: toPx($selectTriggerPaddingRight * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-right: toPx($selectTriggerPaddingRight * $scalingFactor5k);
      }
    }

    .sbb-select-value {
      width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .sbb-select-arrow-wrapper {
      color: if($sbbBusiness, $sbbColorGranite, $sbbColorGrey);
      @include absoluteCenterY();
      right: toPx($selectArrowRight);

      width: toPx($selectArrowWidthHeight);
      height: toPx($selectArrowWidthHeight);

      @include publicOnly() {
        @include mq($from: desktop4k) {
          right: toPx($selectArrowRight * $scalingFactor4k);
          width: toPx($selectArrowWidthHeight * $scalingFactor4k);
          height: toPx($selectArrowWidthHeight * $scalingFactor4k);
        }

        @include mq($from: desktop5k) {
          right: toPx($selectArrowRight * $scalingFactor5k);
          width: toPx($selectArrowWidthHeight * $scalingFactor5k);
          height: toPx($selectArrowWidthHeight * $scalingFactor5k);
        }
      }

      &.sbb-select-arrow-wrapper-rotate {
        transform-origin: toPx($selectArrowWidthHeight / 2) toPx($selectArrowWidthHeight / 4);

        @include publicOnly() {
          @include mq($from: desktop4k) {
            transform-origin: toPx($selectArrowWidthHeight * $scalingFactor4k / 2)
              toPx($selectArrowWidthHeight * $scalingFactor4k / 4);
          }

          @include mq($from: desktop5k) {
            transform-origin: toPx($selectArrowWidthHeight * $scalingFactor5k / 2)
              toPx($selectArrowWidthHeight * $scalingFactor5k / 4);
          }
        }

        transform: rotate(180deg);
      }
    }
  }

  &.ng-touched.ng-invalid:not([aria-expanded='true']) {
    color: $sbbColorError;
    border-color: $sbbColorError;
  }
}
