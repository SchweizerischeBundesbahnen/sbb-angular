load("@npm//@bazel/typescript:index.bzl", "ts_config")
load("//src/angular-business:config.bzl", "BUSINESS_ENTRYPOINTS", "BUSINESS_TESTING_ENTRYPOINTS")
load("//src/angular-core:config.bzl", "CORE_ENTRYPOINTS", "CORE_TESTING_ENTRYPOINTS")
load("//src/angular-maps:config.bzl", "MAPS_ENTRYPOINTS", "MAPS_TESTING_ENTRYPOINTS")
load("//src/angular-public:config.bzl", "PUBLIC_ENTRYPOINTS", "PUBLIC_TESTING_ENTRYPOINTS")
load("//tools:defaults.bzl", "ts_library")
load("//tools/dgeni:index.bzl", "dgeni_api_docs")

package(default_visibility = ["//visibility:public"])

exports_files([
    "bazel-tsconfig-build.json",
    "bazel-tsconfig-test.json",
    "README.md",
])

ts_config(
    name = "tsconfig-test",
    src = "bazel-tsconfig-test.json",
    deps = ["bazel-tsconfig-build.json"],
)

businessApiEntryPoints = BUSINESS_ENTRYPOINTS + BUSINESS_TESTING_ENTRYPOINTS

coreApiEntryPoints = CORE_ENTRYPOINTS + CORE_TESTING_ENTRYPOINTS

mapsApiEntryPoints = MAPS_ENTRYPOINTS + MAPS_TESTING_ENTRYPOINTS

publicApiEntryPoints = PUBLIC_ENTRYPOINTS + PUBLIC_TESTING_ENTRYPOINTS

# List that contains all source files that need to be processed by Dgeni.
apiSourceFiles = ["//src/angular-business/%s:source-files" % name for name in businessApiEntryPoints] + \
                 ["//src/angular-core/%s:source-files" % name for name in coreApiEntryPoints] + \
                 ["//src/angular-maps/%s:source-files" % name for name in mapsApiEntryPoints] + \
                 ["//src/angular-public/%s:source-files" % name for name in publicApiEntryPoints]

dgeni_api_docs(
    name = "api-docs",
    srcs = apiSourceFiles + [
        # Add all Angular packages to the sources because some Material exports use
        # Angular exports and these should not cause any warnings when Dgeni uses the
        # type checker to parse our TypeScript sources.
        "@npm//@angular/cdk",
        "@npm//@angular/core",
        "@npm//@angular/common",
        "@npm//@angular/forms",
        "@npm//@angular/animations",
        "@npm//@angular/platform-browser",
    ],
    entry_points = {
        "angular-business": businessApiEntryPoints,
        "angular-core": coreApiEntryPoints,
        "angular-maps": mapsApiEntryPoints,
        "angular-public": publicApiEntryPoints,
    },
    tags = ["docs-package"],
)

ts_library(
    name = "dev_mode_types",
    srcs = ["dev-mode-types.d.ts"],
)

htmlSourceFiles = ["//src/angular-business/%s:html-source-files" % name for name in businessApiEntryPoints] + \
                  ["//src/angular-core/%s:html-source-files" % name for name in coreApiEntryPoints] + \
                  ["//src/angular-maps/%s:html-source-files" % name for name in mapsApiEntryPoints] + \
                  ["//src/angular-public/%s:html-source-files" % name for name in publicApiEntryPoints]

filegroup(
    name = "used-icons-source-files",
    srcs = htmlSourceFiles,
)

genrule(
    name = "used-icons",
    srcs = [":used-icons-source-files"],
    outs = [
        "used-icons.json",
        "_used-icons.MF",
    ],
    cmd = """
      echo "$(execpaths //src:used-icons-source-files)" > $(execpath _used-icons.MF)

      # Run the bazel entry-point for generating the package info.
      ./$(execpath //tools/icons-in-library:bazel-bin) \
          "$(execpath _used-icons.MF)" \
          "$(execpath used-icons.json)"
    """,
    output_to_bindir = True,
    tools = ["//tools/icons-in-library:bazel-bin"],
)
