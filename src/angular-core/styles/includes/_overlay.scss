// TODO: Check what is autocomplete specific, dropdown specific and select specific and refactor accordingly
$autocompleteTransition: height 0.25s cubic-bezier(0.4, 0, 0.2, 1),
  opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);
$autocompleteBg: $sbbColorWhite;
$autocompleteBorderWidth: 2px;
$autocompleteBorder: $autocompleteBorderWidth solid $sbbColorGrey;
$autocompleteColor: $sbbColorGrey;
$autocompleteShadowWidth: 8px;
$autocompleteInputActiveBorderBottomColor: $sbbColorCloud;
$autocompleteInputActiveBorderWidth: 1px;
$optionGroupItemPaddingLeft: 24px;
$optionPaddingLeft: 14px;

$autocompletePaddingTop: 14px;
$autocompletePaddingX: 16px;
$autocompletePaddingBottom: 18px;

$dropdownPaddingBottom: 10px;
$autocompleteOptionHoverColor: $sbbColorRed;
$autocompleteOptionActiveColor: $sbbColorBlack;
$autocompleteHighlightTextBold: $fontSbbBold;
$autocompleteHoverColor: $sbbColorBlack;
$optionMultipleCheckboxPaddingLeft: 16;
$optionMultipleNoCheckboxPaddingLeft: 14;

$optionSelectedBarWidth: 1;
$optionMarginTop: 10px;

@if $sbbBusiness {
  $autocompleteBorderWidth: 1px;
  $autocompleteBorder: $autocompleteBorderWidth solid $sbbColorGranite;
  $autocompleteShadowWidth: 4px;
  $autocompleteColor: $sbbColorGranite;
  $optionGroupItemPaddingLeft: 16px;

  $autocompletePaddingTop: 8px;
  $autocompletePaddingX: 8px;
  $autocompletePaddingBottom: 4px;

  $autocompleteOptionHoverColor: $sbbColorRed125;
  $autocompleteOptionActiveColor: $sbbColorBlack;
  $dropdownPaddingBottom: 4px;
  $optionMultipleCheckboxPaddingLeft: 8;
  $optionMultipleNoCheckboxPaddingLeft: 8;
  $optionMarginTop: 4px;
}

$autocompleteBorderTopReverse: $autocompleteBorder;

@mixin autocompleteBase() {
  position: relative;
  width: 100%;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: $autocompleteBg;
  border: $autocompleteBorder;
  transition: $autocompleteTransition;
  color: $autocompleteColor;

  &.sbb-autocomplete-visible {
    visibility: visible;
  }

  &.sbb-autocomplete-hidden {
    visibility: hidden;
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      border-width: toPx(2 * $scalingFactor4k);
      box-shadow: 0 toPx(8 * $scalingFactor4k) 0 rgba(0, 0, 0, 0.15);
    }

    @include mq($from: desktop5k) {
      border-width: toPx(2 * $scalingFactor5k);
      box-shadow: 0 toPx(8 * $scalingFactor5k) 0 rgba(0, 0, 0, 0.15);
    }
  }

  sbb-option-group {
    @include optionGroupBase;
  }
}

@mixin autocompleteCombinedBoxShadows($mode: default, $scalingFactor: 1) {
  $sign: 1;
  @if $mode == reverse {
    $sign: -1;
  }
  box-shadow: autocompleteBoxShadow($sign, $scalingFactor),
    autocompleteInputActiveBorder(-$sign, $scalingFactor);
}

@function autocompleteBoxShadow($sign, $scalingFactor) {
  @return 0 toPx($sign * $autocompleteShadowWidth * $scalingFactor) 0 rgba(0, 0, 0, 0.15);
}

@function autocompleteInputActiveBorder($sign, $scalingFactor) {
  @return 0
    toPx($sign * ($autocompleteBorderWidth + $autocompleteInputActiveBorderWidth) * $scalingFactor)
    0 toPx(-$autocompleteBorderWidth * $scalingFactor) $autocompleteInputActiveBorderBottomColor;
}

@mixin autocompleteOffsetCorrection($mode: default, $scalingFactor: 1) {
  $sign: -1;
  @if $mode == reverse {
    $sign: 1;
  }
  $offset-top: $sign * ($autocompleteBorderWidth - $autocompleteInputActiveBorderWidth) *
    $scalingFactor;

  @if $offset-top < 0 {
    $offset-top: $offset-top - 0.05; // better rendering e.g. in 4k mode
  }
  position: relative;
  top: toPx($offset-top);
}

@mixin autocompleteDirectionalRules($mode: default) {
  @if $mode == default {
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
    border-top: none;
    @include autocompleteCombinedBoxShadows();
    @include autocompleteOffsetCorrection();

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-bottom-left-radius: toPx(2 * $scalingFactor4k);
        border-bottom-right-radius: toPx(2 * $scalingFactor4k);
        @include autocompleteCombinedBoxShadows($scalingFactor: $scalingFactor4k);
        @include autocompleteOffsetCorrection($scalingFactor: $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-bottom-left-radius: toPx(2 * $scalingFactor5k);
        border-bottom-right-radius: toPx(2 * $scalingFactor5k);
        @include autocompleteCombinedBoxShadows($scalingFactor: $scalingFactor5k);
        @include autocompleteOffsetCorrection($scalingFactor: $scalingFactor5k);
      }
    }
  } @else if $mode == reverse {
    border-radius: 2px 2px 0 0;
    border-top: $autocompleteBorderTopReverse;
    border-bottom: none;
    @include autocompleteCombinedBoxShadows($mode: reverse);
    @include autocompleteOffsetCorrection($mode: reverse);

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-left-radius: toPx(2 * $scalingFactor4k);
        border-top-right-radius: toPx(2 * $scalingFactor4k);
        border-top-width: toPx(2 * $scalingFactor4k);
        @include autocompleteCombinedBoxShadows($mode: reverse, $scalingFactor: $scalingFactor4k);
        @include autocompleteOffsetCorrection($mode: reverse, $scalingFactor: $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-left-radius: toPx(2 * $scalingFactor5k);
        border-top-right-radius: toPx(2 * $scalingFactor5k);
        border-top-width: toPx(2 * $scalingFactor5k);
        @include autocompleteCombinedBoxShadows($mode: reverse, $scalingFactor: $scalingFactor5k);
        @include autocompleteOffsetCorrection($mode: reverse, $scalingFactor: $scalingFactor5k);
      }
    }
  }
}

@mixin autocompleteInputActive($mode: default) {
  @if $mode == default {
    @include autocompleteInputActiveDefault();
  } @else if $mode == reverse {
    @include autocompleteInputActiveReverse();
  }
}

@mixin autocompleteInputActiveDefault() {
  border-radius: 2px 2px 0 0;
  border-color: $sbbColorGrey;
}

@mixin autocompleteInputActiveReverse() {
  border-radius: 0 0 2px 2px;
  border-color: $sbbColorGrey;
}

@mixin optionGroupBase {
  position: relative;
  display: block;
  color: $sbbColorMetal;

  @include publicOnly() {
    @include mq($from: desktop4k) {
      border-top-width: toPx(1 * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      border-top-width: toPx(1 * $scalingFactor5k);
    }
  }

  sbb-option {
    padding-left: $optionGroupItemPaddingLeft;

    &:first-of-type {
      @include publicOnly() {
        margin-top: 0;
        padding-top: 0;
      }

      @include businessOnly() {
        padding-top: $optionMarginTop;
      }
    }
  }
  .sbb-optgroup-label {
    padding-left: $autocompletePaddingX;
    padding-right: $autocompletePaddingX;
    padding-top: $autocompletePaddingTop;

    @include businessOnly() {
      padding-bottom: 0;
    }

    @include publicOnly() {
      padding-bottom: $autocompletePaddingTop;

      @include mq($from: desktop4k) {
        font-size: toPx(10 * $scalingFactor4k);
        padding-top: toPx($autocompletePaddingTop * $scalingFactor4k);
        padding-bottom: toPx($autocompletePaddingTop * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        font-size: toPx(10 * $scalingFactor5k);
        padding-top: toPx($autocompletePaddingTop * $scalingFactor5k);
        padding-bottom: toPx($autocompletePaddingTop * $scalingFactor5k);
      }
    }

    @include label;
  }
}

@mixin optionGroupDivider() {
  sbb-option-group + sbb-option-group,
  sbb-option + sbb-option-group,
  sbb-option-group + sbb-option {
    border-top: 1px solid $autocompleteInputActiveBorderBottomColor;

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-width: toPx(1 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-width: toPx(1 * $scalingFactor5k);
      }
    }
  }
}

@mixin optionBorderLeft($color) {
  &::after {
    content: '';
    position: absolute;
    height: 100%;
    width: toPx($optionSelectedBarWidth);
    left: 0;
    top: 0;
    background-color: $color;
  }
}

@mixin optionBase($selectMode: false) {
  @include ellipsis;

  position: relative;
  display: block;
  text-decoration: none;
  padding: toPx(4) $autocompletePaddingX;
  text-align: left;
  max-width: 100%;
  cursor: pointer;
  outline: 0;

  @if $selectMode == true {
    cursor: default;
    color: $sbbColorGrey;

    @include businessOnly() {
      color: $sbbColorGranite;
    }
  }

  &:first-of-type {
    margin-top: $optionMarginTop;
  }
  &:last-of-type {
    margin-bottom: $dropdownPaddingBottom;
  }

  @include businessOnly() {
    line-height: pxToRem(20);
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      font-size: toPx($sizeFontDefault * $scalingFactor4k);
      padding: toPx(4 * $scalingFactor4k) toPx($autocompletePaddingX * $scalingFactor4k);

      &:first-of-type {
        margin-top: toPx($optionMarginTop * $scalingFactor4k);
      }

      &:last-of-type {
        margin-bottom: toPx($dropdownPaddingBottom * $scalingFactor4k);
      }
    }
    @include mq($from: desktop5k) {
      font-size: toPx($sizeFontDefault * $scalingFactor5k);
      padding: toPx(4 * $scalingFactor5k) toPx($autocompletePaddingX * $scalingFactor5k);
      &:first-of-type {
        margin-top: toPx($optionMarginTop * $scalingFactor5k);
      }
      &:last-of-type {
        margin-bottom: toPx($dropdownPaddingBottom * $scalingFactor5k);
      }
    }
  }

  &:not(.sbb-active) strong {
    color: $autocompleteHoverColor;
  }

  &.sbb-selected {
    color: $autocompleteOptionActiveColor;

    @include businessOnly() {
      background-color: $sbbColorCloud;
      @include optionBorderLeft($autocompleteOptionActiveColor);
    }
  }

  &:not(:disabled):not(.sbb-option-disabled):hover,
  &:not(:disabled):not(.sbb-option-disabled):focus,
  &:not(:disabled):not(.sbb-option-disabled):hover strong,
  &:not(:disabled):not(.sbb-option-disabled):focus strong,
  &.sbb-active {
    color: $autocompleteOptionHoverColor;

    @include businessOnly() {
      background-color: $sbbColorMilk;
      @include optionBorderLeft($autocompleteOptionHoverColor);
    }
  }

  .sbb-option-text {
    display: inline-block;
    flex-grow: 1;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .sbb-icon:not(.sbb-checkbox-checked),
  .sbb-icon-component:not(.sbb-checkbox-checked) {
    // TODO(icon-migration): remove '.sbb-icon-component' because new icons inherit colors (also color: can be removed)
    line-height: 0;
    margin: pxToRem(-9) pxToRem(2) pxToRem(-9) pxToRem(-5);
    transform: translateY(pxToRem(7));
  }

  > .sbb-icon:first-child:not(.sbb-checkbox-checked),
  > .sbb-icon-component:first-child:not(.sbb-checkbox-checked) {
    // TODO(icon-migration): remove '.sbb-icon-component' because new icons inherit colors (also color: can be removed)
    float: left;
  }
}
