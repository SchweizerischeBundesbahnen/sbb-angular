$autocompleteTransition: height 0.25s cubic-bezier(0.4, 0, 0.2, 1),
  opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);
$autocompleteBg: $sbbColorWhite;
$autocompleteBorderWidth: if($sbbBusiness, 1px, 2px);
$autocompleteBorder: if(
  $sbbBusiness,
  $autocompleteBorderWidth solid $sbbColorIron,
  $autocompleteBorderWidth solid $sbbColorGrey
);
$autocompleteBorderRadius: 2px;
$autocompleteBorderTopReverse: $autocompleteBorder;
$autocompleteShadowWidth: if($sbbBusiness, 4px, 8px);
$autocompleteInputActiveBorderBottomColor: $sbbColorCloud;
$autocompleteInputActiveBorderWidth: 1px;
$autocompleteAndOptionPaddingX: if($sbbBusiness, 8px, 16px);
$autocompletePaddingBottom: if($sbbBusiness, 4px, 18px);
$autocompletePaddingX: if($sbbBusiness, 8px, 16px);

$optionMultipleCheckboxPaddingLeft: if($sbbBusiness, 8px, 16px);
$optionMultipleNoCheckboxPaddingLeft: if($sbbBusiness, 8px, 14px);
$optionMarginY: if($sbbBusiness, 4px, 10px);
$optionGroupItemPaddingLeft: if($sbbBusiness, 16px, 24px);
$optionGroupLabelPaddingY: if($sbbBusiness, 8px, 14px);
$optionAndAutocompleteColor: if($sbbBusiness, $sbbColorIron, $sbbColorGrey);
$optionHoverColor: if($sbbBusiness, $sbbColorRed125, $sbbColorRed);
$optionSelectedColor: $sbbColorBlack;

@mixin autocompleteBase() {
  position: relative;
  width: 100%;
  overflow-x: hidden;
  overflow-y: auto;
  background-color: $autocompleteBg;
  border: $autocompleteBorder;
  transition: $autocompleteTransition;
  color: $optionAndAutocompleteColor;

  &.sbb-autocomplete-visible {
    visibility: visible;
  }

  &.sbb-autocomplete-hidden {
    visibility: hidden;
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      border-width: toPx($autocompleteBorderWidth * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      border-width: toPx($autocompleteBorderWidth * $scalingFactor5k);
    }
  }

  sbb-option-group {
    @include optionGroupBase;
  }
}

@mixin autocompleteCombinedBoxShadows($mode: default, $scalingFactor: 1) {
  $sign: 1;
  @if $mode == reverse {
    $sign: -1;
  }
  box-shadow: autocompleteBoxShadow($sign, $scalingFactor),
    horizontalBorderBoxShadow(-$sign, $scalingFactor);
}

@function autocompleteBoxShadow($sign, $scalingFactor) {
  @return 0 toPx($sign * $autocompleteShadowWidth * $scalingFactor) 0 rgba(0, 0, 0, 0.15);
}

@function horizontalBorderBoxShadow($sign, $scalingFactor) {
  @return 0
    toPx($sign * ($autocompleteBorderWidth + $autocompleteInputActiveBorderWidth) * $scalingFactor)
    0 toPx(-$autocompleteBorderWidth * $scalingFactor) $autocompleteInputActiveBorderBottomColor;
}

@mixin autocompleteOffsetCorrection($mode: default, $scalingFactor: 1) {
  $sign: -1;
  @if $mode == reverse {
    $sign: 1;
  }
  $offset-top: $sign * ($autocompleteBorderWidth - $autocompleteInputActiveBorderWidth) *
    $scalingFactor;

  @if $offset-top < 0 {
    $offset-top: $offset-top - 0.05; // better rendering e.g. in 4k mode
  }
  position: relative;
  top: toPx($offset-top);
}

@mixin autocompleteDirectionalRules($mode: default) {
  @if $mode == default {
    border-bottom-left-radius: $autocompleteBorderRadius;
    border-bottom-right-radius: $autocompleteBorderRadius;
    border-top: none;
    @include autocompleteCombinedBoxShadows();
    @include autocompleteOffsetCorrection();

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-bottom-left-radius: toPx($autocompleteBorderRadius * $scalingFactor4k);
        border-bottom-right-radius: toPx($autocompleteBorderRadius * $scalingFactor4k);
        @include autocompleteCombinedBoxShadows($scalingFactor: $scalingFactor4k);
        @include autocompleteOffsetCorrection($scalingFactor: $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-bottom-left-radius: toPx($autocompleteBorderRadius * $scalingFactor5k);
        border-bottom-right-radius: toPx($autocompleteBorderRadius * $scalingFactor5k);
        @include autocompleteCombinedBoxShadows($scalingFactor: $scalingFactor5k);
        @include autocompleteOffsetCorrection($scalingFactor: $scalingFactor5k);
      }
    }
  } @else if $mode == reverse {
    border-radius: $autocompleteBorderRadius $autocompleteBorderRadius 0 0;
    border-top: $autocompleteBorderTopReverse;
    border-bottom: none;
    @include autocompleteCombinedBoxShadows($mode: reverse);
    @include autocompleteOffsetCorrection($mode: reverse);

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-left-radius: toPx($autocompleteBorderRadius * $scalingFactor4k);
        border-top-right-radius: toPx($autocompleteBorderRadius * $scalingFactor4k);
        border-top-width: toPx($autocompleteBorderRadius * $scalingFactor4k);
        @include autocompleteCombinedBoxShadows($mode: reverse, $scalingFactor: $scalingFactor4k);
        @include autocompleteOffsetCorrection($mode: reverse, $scalingFactor: $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-left-radius: toPx($autocompleteBorderRadius * $scalingFactor5k);
        border-top-right-radius: toPx($autocompleteBorderRadius * $scalingFactor5k);
        border-top-width: toPx($autocompleteBorderRadius * $scalingFactor5k);
        @include autocompleteCombinedBoxShadows($mode: reverse, $scalingFactor: $scalingFactor5k);
        @include autocompleteOffsetCorrection($mode: reverse, $scalingFactor: $scalingFactor5k);
      }
    }
  }
}

@mixin autocompleteInputActive($mode: default) {
  @if $mode == default {
    @include autocompleteInputActiveDefault();
  } @else if $mode == reverse {
    @include autocompleteInputActiveReverse();
  }
}

@mixin autocompleteInputActiveDefault() {
  border-radius: $autocompleteBorderRadius $autocompleteBorderRadius 0 0;
  border-color: $optionAndAutocompleteColor;
}

@mixin autocompleteInputActiveReverse() {
  border-radius: 0 0 $autocompleteBorderRadius $autocompleteBorderRadius;
  border-color: $optionAndAutocompleteColor;
}

@mixin optionGroupBase {
  position: relative;
  display: block;
  color: $sbbColorMetal;

  sbb-option {
    padding-left: $optionGroupItemPaddingLeft;

    &:first-of-type {
      @if $sbbBusiness {
        padding-top: $optionMarginY;
      } @else {
        margin-top: 0;
        padding-top: 0;
      }
    }
  }
  .sbb-optgroup-label {
    padding-left: $autocompleteAndOptionPaddingX;
    padding-right: $autocompleteAndOptionPaddingX;
    padding-top: $optionGroupLabelPaddingY;

    @if $sbbBusiness {
      padding-bottom: 0;
    } @else {
      padding-bottom: $optionGroupLabelPaddingY;

      @include mq($from: desktop4k) {
        padding-top: toPx($optionGroupLabelPaddingY * $scalingFactor4k);
        padding-bottom: toPx($optionGroupLabelPaddingY * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-top: toPx($optionGroupLabelPaddingY * $scalingFactor5k);
        padding-bottom: toPx($optionGroupLabelPaddingY * $scalingFactor5k);
      }
    }

    @include label;
  }
}

@mixin optionGroupDivider() {
  sbb-option-group + sbb-option-group,
  sbb-option + sbb-option-group,
  sbb-option-group + sbb-option {
    border-top: 1px solid $autocompleteInputActiveBorderBottomColor;

    @include publicOnly() {
      @include mq($from: desktop4k) {
        border-top-width: toPx(1 * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        border-top-width: toPx(1 * $scalingFactor5k);
      }
    }
  }
}

@mixin optionBorderLeft($color) {
  &::after {
    content: '';
    position: absolute;
    height: 100%;
    width: 1px;
    left: 0;
    top: 0;
    background-color: $color;
  }
}

@mixin optionSelected() {
  color: $optionSelectedColor;
  @include svgIconColor(
    $optionSelectedColor
  ); // TODO(icon-migration): remove definition because new icons inherit colors

  @include businessOnly() {
    background-color: $sbbColorCloud;
    @include optionBorderLeft($optionSelectedColor);
  }
}

@mixin optionBase($selectMode: false) {
  @include ellipsis;

  position: relative;
  display: block;
  text-decoration: none;
  padding: toPx(4) $autocompleteAndOptionPaddingX;
  text-align: left;
  max-width: 100%;
  cursor: pointer;
  outline: 0;
  color: $optionAndAutocompleteColor;
  @include svgIconColor(
    $optionAndAutocompleteColor
  ); // TODO(icon-migration): remove definition because new icons inherit colors

  @if $selectMode == true {
    cursor: default;
  }

  &:first-of-type {
    margin-top: $optionMarginY;
  }
  &:last-of-type {
    margin-bottom: $optionMarginY;
  }

  @include businessOnly() {
    line-height: pxToRem(20);
  }

  @include publicOnly() {
    @include mq($from: desktop4k) {
      font-size: toPx($sizeFontDefault * $scalingFactor4k);
      padding: toPx(4 * $scalingFactor4k) toPx($autocompleteAndOptionPaddingX * $scalingFactor4k);

      &:first-of-type {
        margin-top: toPx($optionMarginY * $scalingFactor4k);
      }

      &:last-of-type {
        margin-bottom: toPx($optionMarginY * $scalingFactor4k);
      }
    }
    @include mq($from: desktop5k) {
      font-size: toPx($sizeFontDefault * $scalingFactor5k);
      padding: toPx(4 * $scalingFactor5k) toPx($autocompleteAndOptionPaddingX * $scalingFactor5k);
      &:first-of-type {
        margin-top: toPx($optionMarginY * $scalingFactor5k);
      }
      &:last-of-type {
        margin-bottom: toPx($optionMarginY * $scalingFactor5k);
      }
    }
  }

  &:not(.sbb-active) strong {
    color: $sbbColorBlack;
  }

  &.sbb-selected {
    @include optionSelected();
  }

  &:not(:disabled):not(.sbb-option-disabled):hover,
  &:not(:disabled):not(.sbb-option-disabled):focus,
  &:not(:disabled):not(.sbb-option-disabled):hover strong,
  &:not(:disabled):not(.sbb-option-disabled):focus strong,
  &.sbb-active {
    color: $optionHoverColor;
    @include svgIconColor(
      $optionHoverColor
    ); // TODO(icon-migration): remove definition because new icons inherit colors

    @include businessOnly() {
      background-color: $sbbColorMilk;
      @include optionBorderLeft($optionHoverColor);
    }
  }

  .sbb-option-text {
    display: inline-block;
    flex-grow: 1;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .sbb-icon:not(.sbb-checkbox-checked),
  .sbb-icon-component:not(.sbb-checkbox-checked) {
    // TODO(icon-migration): remove '.sbb-icon-component' because new icons inherit colors (also color: can be removed)
    line-height: 0;
    margin: pxToRem(-9) pxToRem(2) pxToRem(-9) pxToRem(-5);
    transform: translateY(pxToRem(7));
  }

  > .sbb-icon:first-child:not(.sbb-checkbox-checked),
  > .sbb-icon-component:first-child:not(.sbb-checkbox-checked) {
    // TODO(icon-migration): remove '.sbb-icon-component' because new icons inherit colors (also color: can be removed)
    float: left;
  }
}
