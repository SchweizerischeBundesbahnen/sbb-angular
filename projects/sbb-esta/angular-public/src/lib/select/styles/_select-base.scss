@import '../../autocomplete/styles/autocomplete';

@mixin selectBase {
  .sbb-select-trigger {
    @include inputfields;
    position: relative;
    cursor: pointer;
    display: flex;
    align-items: center;
    padding-right: toPx($selectTriggerPaddingRight);

    @include publicOnly() {
      @include mq($from: desktop4k) {
        padding-right: toPx($selectTriggerPaddingRight * $scalingFactor4k);
      }

      @include mq($from: desktop5k) {
        padding-right: 92px;
      }
    }

    &[aria-expanded='true'] {
      @include autocompleteInputActive();

      &.sbb-select-input-above {
        @include autocompleteInputActive($mode: reverse);
      }
    }

    &.sbb-select-disabled {
      cursor: default;
      background-color: $sbbColorMilk;
      border-color: $sbbColorAluminum;
    }

    .sbb-select-value {
      width: 100%;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .sbb-select-arrow-wrapper {
      @include absoluteCenterY();
      right: toPx($selectArrowRight);

      width: toPx($selectArrowWidthHeight);
      height: toPx($selectArrowWidthHeight);

      @include publicOnly() {
        @include svgIconColor($sbbColorGrey);

        @include mq($from: desktop4k) {
          right: toPx($selectArrowRight * $scalingFactor4k);
          width: toPx($selectArrowWidthHeight * $scalingFactor4k);
          height: toPx($selectArrowWidthHeight * $scalingFactor4k);
        }

        @include mq($from: desktop5k) {
          right: 28px;
          width: toPx($selectArrowWidthHeight * $scalingFactor5k);
          height: toPx($selectArrowWidthHeight * $scalingFactor5k);
        }
      }

      @include businessOnly() {
        @include svgIconColor($sbbColorGranite);
      }

      &-rotate {
        transform-origin: toPx($selectArrowWidthHeight / 2) toPx($selectArrowWidthHeight / 4);

        @include publicOnly() {
          @include mq($from: desktop4k) {
            transform-origin: toPx($selectArrowWidthHeight * $scalingFactor4k / 2) toPx($selectArrowWidthHeight * $scalingFactor4k / 4);
          }

          @include mq($from: desktop5k) {
            transform-origin: toPx($selectArrowWidthHeight * $scalingFactor5k / 2) toPx($selectArrowWidthHeight * $scalingFactor5k / 4);
          }
        }

        transform: rotate(180deg);
      }
    }
  }
}

@mixin selectContentBase {
  max-height: toPx($selectMaxWidth);

  @include publicOnly() {
    @include mq($from: desktop4k) {
      max-height: toPx($selectMaxWidth * $scalingFactor4k);
    }

    @include mq($from: desktop5k) {
      max-height: toPx($selectMaxWidth * $scalingFactor5k);
    }
  }
}
